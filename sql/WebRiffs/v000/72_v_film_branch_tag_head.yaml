# Lists all the film and branch details for the head versions of the
# branches, along with all the tags on the branches.

# 

view:
    viewName: V_FILM_BRANCH_TAG_HEAD
    # The left outer join is so that, if there are no tags, we will still
    # have the film branch.
    query: "
        SELECT
          h.Film_Id Film_Id
          , h.Gv_Project_Id Gv_Project_Id
          , h.Film_Name Film_Name
          , h.Release_Year Release_Year
          , h.Film_Created_On Film_Created_On
          , h.Film_Last_Updated_On Film_Last_Updated_On
          
          , h.Gv_Branch_Id Gv_Branch_Id
          , h.Branch_Gv_Item_Id Branch_Gv_Item_Id
          , h.Branch_Gv_Item_Version_Id Branch_Gv_Item_Version_Id
          , h.Gv_Change_Id Gv_Change_Id
          , h.Branch_Name Branch_Name
          , h.Description Description
          , h.Updated_On Updated_On
          
          , bt.Name Tag_Name
          , bt.Gv_Item_Id Tag_Gv_Item_Id
        FROM
            V_FILM_BRANCH_HEAD h
        INNER JOIN
            V_GV_CHANGE_ITEM_HEAD cih
                ON cih.Gv_Branch_Id = h.Gv_Branch_Id
        LEFT OUTER JOIN
            BRANCH_TAG bt
                ON bt.Gv_Item_Id = cih.Gv_Item_Id
        
        WHERE cih.Alive = 1
        "
    columns:
        - column:
            name: Film_Id
            type: int
            constraints:
                - constraint:
                    type: foreign key
                    table: FILM
                    column: Film_Id
        # FIXME the rest of the columns
    whereClauses:
        - where:
            name: Film_Name_Like
            sql: Film_Name LIKE {name}
            argument:
                name: name
                type: nvarchar(200)
        - where:
            name: Branch_Name_Like
            sql: Branch_Name LIKE {name}
            argument:
                name: name
                type: nvarchar(200)
        - where:
            name: Branch_Description_Like
            sql: Description LIKE {desc}
            argument:
                name: desc
                type: nvarchar(2048)
        - where:
            name: Has_Tag
            sql: Tag_Name = {tag}
            argument:
                name: tag
                type: nvarchar(64)
        - where:
            name: In_Tag_Set
            sql: Tag_Name IN {tag_set}
            argument:
                name: tag_set
                type: set nvarchar(64)