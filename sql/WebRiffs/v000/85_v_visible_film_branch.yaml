
# A join between the film_branch view and the permissions.  This will, however,
# not show films if the user cannot see any of its branches.

view:
    viewName: V_VISIBLE_FILM_BRANCH
    
    # Public access union to branch-specific access
    query: "SELECT
          fv.Film_Id Film_Id
          , fv.Gv_Project_Id Gv_Project_Id
          , fv.Film_Name Film_Name
          , fv.Release_Year Release_Year
          , fv.Film_Created_On Film_Created_On
          , fv.Film_Last_Updated_On Film_Last_Updated_On
          
          , fv.Film_Branch_Id Film_Branch_Id
          , fv.Gv_Branch_Id Gv_Branch_Id
          , fv.Branch_Name Branch_Name
          , fv.Branch_Created_On Branch_Created_On
          , fv.Branch_Last_Updated_On Branch_Last_Updated_On
          
          , ua.User_Id User_Id
          , ua.Access Access
          , ua.Privilege_Level Privilege_Level
        FROM V_FILM_BRANCH fv
        INNER JOIN FILM_BRANCH_PUBLIC p
            ON fv.Film_Branch_Id = p.Film_Branch_Id
        INNER JOIN USER_ACCESS ua
            ON ua.Access = p.Access
            AND ua.Privilege_Level >= p.Minimum_Privilege_Level
        
        
        UNION
        
        
        SELECT
          fv.Film_Id Film_Id
          , fv.Gv_Project_Id Gv_Project_Id
          , fv.Film_Name Film_Name
          , fv.Release_Year Release_Year
          , fv.Film_Created_On Film_Created_On
          , fv.Film_Last_Updated_On Film_Last_Updated_On
          
          , fv.Film_Branch_Id Film_Branch_Id
          , fv.Gv_Branch_Id Gv_Branch_Id
          , fv.Branch_Name Branch_Name
          , fv.Branch_Created_On Branch_Created_On
          , fv.Branch_Last_Updated_On Branch_Last_Updated_On
          
          , NULL User_Id
          , NULL Access
          , NULL Privilege_Level
        FROM V_FILM_BRANCH fv
        INNER JOIN FILM_BRANCH_PUBLIC p
            ON fv.Film_Branch_Id = p.Film_Branch_Id
        WHERE fv.Is_Public = 1
        
        
        UNION
        
        
        SELECT
          fv.Film_Id Film_Id
          , fv.Gv_Project_Id Gv_Project_Id
          , fv.Film_Name Film_Name
          , fv.Release_Year Release_Year
          , fv.Film_Created_On Film_Created_On
          , fv.Film_Last_Updated_On Film_Last_Updated_On
          
          , fv.Film_Branch_Id Film_Branch_Id
          , fv.Gv_Branch_Id Gv_Branch_Id
          , fv.Branch_Name Branch_Name
          , fv.Branch_Created_On Branch_Created_On
          , fv.Branch_Last_Updated_On Branch_Last_Updated_On
          
          , u.User_Id User_Id
          , u.Access Access
          , u.Privilege_Level
        FROM V_FILM_BRANCH fv
        INNER JOIN FILM_BRANCH_USER u
            ON fv.Film_Branch_Id = u.Film_Branch_Id
        "
    columns:
        - column:
            name: Film_Id
            type: int
            constraints:
                - constraint:
                    type: foreign key
                    table: FILM
                    column: Film_Id
        - column:
            name: Gv_Project_Id
            type: int
            constraints:
                - constraint:
                    type: foreign key
                    table: GV_PROJECT
                    column: Gv_Project_Id
        - column:
            name: Film_Name
            type: nvarchar(200)
        - column:
            name: Release_Year
            type: int
        - column:
            name: Film_Created_On
            type: timestamp
        - column:
            name: Film_Last_Updated_On
            type: timestamp
        - column:
            name: Film_Branch_Id
            type: int
            constraints:
                - constraint:
                    type: foreign key
                    table: FILM_BRANCH
                    column: Film_Branch_Id
        - column:
            name: Gv_Branch_Id
            type: int
            constraints:
                - constraint:
                    type: foreign key
                    table: GV_BRANCH
                    column: Gv_Branch_Id
        - column:
            name: Branch_Name
            type: nvarchar(255)
        - column:
            name: Branch_Created_On
            type: timestamp
        - column:
            name: Branch_Last_Updated_On
            type: timestamp
        - column:
            name: User_Id
            type: int
            constraints:
                - constraint:
                    type: foreign key
                    table: USER
                    column: User_Id
        - column:
            name: Access
            type: varchar(64)
            constraints:
                - constraint:
                    type: not null
        - column:
            name: Privilege_Level
            type: int
            constraints:
                - constraint:
                    type: not null
    constraints:
        - constraint:
            type: fake index
            columns: Film_Id, Film_Branch_Id, User_Id
        - constraint:
            type: fake_index
            columns: Film_Id, User_Id
    extend:
        - sql:
            type: query
            name: Distinct_Branches_By_Film_And_User
            # Uses a null-safe OR in the clause, and has a null-safe equals
            # by setting to a never-assigned user id (-1).
            query: "
              SELECT DISTINCT
                  Film_Branch_Id,
                  Branch_Name,
                  Branch_Created_On,
                  Branch_Last_Updated_On
              FROM V_VISIBLE_FILM_BRANCH
              WHERE Film_Id = {Film_Id}
                AND (User_Id = COALESCE({User_Id}, -1) OR User_Id IS NULL)
              "
            arguments: User_Id, Film_Id
        - sql:
            type: query
            name: Count_Distinct_Branches_By_Film_And_User
            # Uses a null-safe OR in the clause, and has a null-safe equals
            # by setting to a never-assigned user id (-1).
            query: "
              SELECT COUNT(DISTINCT Film_Branch_Id)
              FROM V_VISIBLE_FILM_BRANCH
              WHERE Film_Id = {Film_Id}
                AND (User_Id = COALESCE({User_Id}, -1) OR User_Id IS NULL)
              "
            arguments: User_Id, Film_Id
            